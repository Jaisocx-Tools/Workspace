import { EventEmitter } from "@jaisocx/event-emitter";
import { TemplateRenderer } from "@jaisocx/template-renderer";
import { Dimensions } from "./Types.js";
import { TooltipLib } from "./TooltipLib.js";
import { TooltipInterface } from "./TooltipInterface.js";
import { TooltipShownSettings } from "./TooltipShownSettings.js";
import "@jaisocx-tooltip-assets/tooltip-styles-main-webpack.css";
export declare class Tooltip extends EventEmitter implements TooltipInterface {
    eventTargetHtmlNodeId: any;
    eventTargetSelector: any;
    eventTargetHtmlNode: HTMLElement | null;
    eventTargetDimensions: Dimensions;
    eventName: any;
    mainHtmlNodeId: any;
    mainHtmlNode: HTMLElement | null;
    tooltipHtmlNodeDimensions: Dimensions;
    timeoutToCloseMillis: number;
    timeoutToCloseId: null | ReturnType<typeof setTimeout>;
    tooltipHideBehaviour: any;
    cssClasses: any;
    html: any;
    paddingEventTarget: number;
    paddingDimEventTarget: any;
    tooltipAlignDimensionOne: any;
    tooltipAlignDimensionTwo: number;
    tooltipPaddingAlignDimensionTwo: number;
    tooltipPaddingSizeDimAlignDimensionTwo: any;
    alternativeTabBorderSides: number[];
    withArrow: number;
    arrowSize: number;
    arrowSizeDim: any;
    arrowHtmlNode: HTMLElement | undefined;
    templateRenderer: TemplateRenderer;
    lib: TooltipLib;
    constructor();
    _hide(node: HTMLElement | null): undefined;
    _show(node: HTMLElement | null): undefined;
    getEventsNamesEmitted(): any;
    setDebug(debug: boolean): Tooltip;
    setHtml(html: any): TooltipInterface;
    setTemplate(template: any): TooltipInterface;
    setTemplateData(data: any): TooltipInterface;
    setCssClasses(cssClasses: any): TooltipInterface;
    setPaddingEventTarget(padding: number, paddingDim: any): TooltipInterface;
    setTooltipAlignDimensionOne(tooltipAlignDimensionOne: number): TooltipInterface;
    setTooltipAlignDimensionTwo(tooltipAlignDimensionTwo: number): TooltipInterface;
    setTooltipPaddingAlignDimensionTwo(tooltipPaddingAlignDimensionTwo: number, tooltipPaddingSizeDimAlignDimensionTwo: any): TooltipInterface;
    setEventTargetHtmlNodeId(id: any): TooltipInterface;
    setEventTargetSelector(cssSelector: any): TooltipInterface;
    setEventTargetHtmlNode(eventTarget: HTMLElement): TooltipInterface;
    setEventName(eventName: any): TooltipInterface;
    setAlignDimensionOneValueOrder(alternativeTabBorderSides: number[]): TooltipInterface;
    setIsWithArrow(withArrow: number): TooltipInterface;
    setArrowSize(arrowSize: number, arrowSizeDim: any): TooltipInterface;
    setTimeoutToCloseMillis(timeoutMillis: number): TooltipInterface;
    setTooltipHideBehaviour(tooltipHideBehaviour: any): TooltipInterface;
    render(): TooltipInterface;
    renderTooltipArrowHtmlNode(): TooltipInterface;
    getLocalStorageArray(): TooltipShownSettings | null | undefined;
    addToLocalStorageArray(key: any, value: any): Tooltip;
    removeFromLocalStorageArray(key: any, jPath: any[], jPathMatchingValue: any): Tooltip;
    addCleanupEventHandler(): Tooltip;
    addClickCurrentTooltipCloseEventHandler(): Tooltip;
    addEventTriggerTooltipShowEventHandler(): Tooltip;
    addWindowResizeEventListener(): Tooltip;
    addScrollEventListeners(): Tooltip;
    addEventListeners(): TooltipInterface;
    showTooltip(toShowCssDisplayValue: any, // Constants.ShowModes: hide, show, turn
    eventTarget: any): TooltipInterface;
    hideAllTooltips(): undefined;
    hideTooltipsByBehaviours(hideBehaviourArray: any[], tooltipId: any | null): undefined;
    calculateTooltipHtmlNodeDimensions(): Dimensions;
    setStandardCssClassAndGetDimensions(htmlNode: HTMLElement | null): Dimensions;
}
//# sourceMappingURL=Tooltip.d.ts.map